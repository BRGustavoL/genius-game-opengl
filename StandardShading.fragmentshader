#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightDirection_cameraspaceVerde;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightPosition_worldspaceVerde;
uniform float LightPower_worldspaceGeral;
uniform float LightPower_worldspaceBotoes;

void main(){

	vec3 LightColor = vec3(1,1,1);
	float LightPowerGeral = LightPower_worldspaceGeral;
	float LightPowerBotoes = LightPower_worldspaceBotoes;
	
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	float distance = length( LightPosition_worldspace - Position_worldspace );
	float distanceVerde = length( LightPosition_worldspaceVerde - Position_worldspace );

	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	vec3 lVerde = normalize( LightDirection_cameraspaceVerde );
	
	float cosTheta = clamp( dot( n,l ), 0,1 );
	float cosThetaVerde = clamp( dot( n,lVerde ), 0,1 );
	
	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l,n);
	vec3 RVerde = reflect(-lVerde,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	float cosAlphaVerde = clamp( dot( E,RVerde ), 0,1 );
	
	color = 
		MaterialAmbientColor +
		MaterialDiffuseColor * LightColor * LightPowerGeral * cosTheta / (distance*distance) +
		MaterialSpecularColor * LightColor * LightPowerGeral * pow(cosAlpha,5) / (distance*distance) +
		
		MaterialDiffuseColor * LightColor * LightPowerBotoes * cosThetaVerde / (distanceVerde*distanceVerde) +
		MaterialSpecularColor * LightColor * LightPowerBotoes * pow(cosAlphaVerde,5) / (distanceVerde*distanceVerde);
}